---
- name: Deploy Flask VM Monitoring Dashboard
  hosts: apache_servers
  become: true
  vars:
    flask_app_path: /var/www/flaskapp
    flask_venv_path: /var/www/flaskapp/venv
  tasks:

    - name: Install required packages 
      apt:
        name:
          - apache2
          - libapache2-mod-wsgi-py3
          - python3-pip
          - python3-venv
          - git
        state: present
        update_cache: yes

    - name: Create Flask app directory
      file:
        path: "{{ flask_app_path }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create virtual environment
      ansible.builtin.command: "python3 -m venv {{ flask_venv_path }}"

    - name: Install Flask and Paramiko inside virtualenv
      ansible.builtin.command: "{{ flask_venv_path }}/bin/pip install flask paramiko"

    - name: Deploy Flask VM Monitoring App
      copy:
        dest: "{{ flask_app_path }}/app.py"
        content: |
          from flask import Flask, render_template_string
          import paramiko
          import socket

          app = Flask(__name__)

          vms = [
              {"name": "web1", "ip": "192.168.1.101", "user": "ubuntu"},
              {"name": "web2", "ip": "192.168.1.102", "user": "ubuntu"},
              {"name": "db1", "ip": "192.168.1.103", "user": "ubuntu"},
          ]

          def get_vm_info(vm):
              try:
                  ssh = paramiko.SSHClient()
                  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                  ssh.connect(vm["ip"], username=vm["user"], timeout=3)

                  stdin, stdout, stderr = ssh.exec_command("uptime")
                  uptime_output = stdout.read().decode()

                  stdin, stdout, stderr = ssh.exec_command("free -m")
                  free_output = stdout.read().decode()

                  stdin, stdout, stderr = ssh.exec_command("df -h /")
                  disk_output = stdout.read().decode()

                  ssh.close()

                  cpu_load = uptime_output.split("load average:")[1].split(",")[0].strip()

                  lines = free_output.splitlines()
                  mem_line = lines[1].split()
                  mem_total = mem_line[1]
                  mem_used = mem_line[2]
                  mem_percent = round(int(mem_used) / int(mem_total) * 100, 2)

                  disk_line = disk_output.splitlines()[1].split()
                  disk_available = disk_line[3]

                  return {
                      "status": "✅ OK",
                      "cpu_load": cpu_load,
                      "mem_percent": f"{mem_percent}%",
                      "disk_available": disk_available
                  }
              except (socket.error, paramiko.ssh_exception.SSHException, IndexError, ValueError):
                  return {
                      "status": "❌ Caído",
                      "cpu_load": "-",
                      "mem_percent": "-",
                      "disk_available": "-"
                  }

          @app.route('/')
          def home():
              results = []
              for vm in vms:
                  info = get_vm_info(vm)
                  results.append({
                      "name": vm["name"],
                      "ip": vm["ip"],
                      "status": info["status"],
                      "cpu_load": info["cpu_load"],
                      "mem_percent": info["mem_percent"],
                      "disk_available": info["disk_available"]
                  })

              html = """
              <h1>Dashboard de VMs</h1>
              <table border="1" cellpadding="5">
                  <tr>
                      <th>Nombre</th>
                      <th>IP</th>
                      <th>Estado</th>
                      <th>Carga CPU</th>
                      <th>RAM usada</th>
                      <th>Espacio libre en Disco</th>
                  </tr>
                  {% for vm in vms %}
                      <tr>
                          <td>{{ vm.name }}</td>
                          <td>{{ vm.ip }}</td>
                          <td>{{ vm.status }}</td>
                          <td>{{ vm.cpu_load }}</td>
                          <td>{{ vm.mem_percent }}</td>
                          <td>{{ vm.disk_available }}</td>
                      </tr>
                  {% endfor %}
              </table>
              <br>
              <form action="/" method="get">
                  <button type="submit">Refrescar Estado</button>
              </form>
              """
              return render_template_string(html, vms=results)

          if __name__ == "__main__":
              app.run(host="0.0.0.0")

    - name: Create WSGI entry point
      copy:
        dest: "{{ flask_app_path }}/app.wsgi"
        content: |
          import sys
          sys.path.insert(0, "{{ flask_app_path }}")
          from app import app as application

    - name: Configure Apache for Flask app
      copy:
        dest: /etc/apache2/sites-available/flaskapp.conf
        content: |
          <VirtualHost *:80>
              ServerName localhost
              WSGIDaemonProcess flaskapp threads=5 python-home={{ flask_venv_path }}
              WSGIScriptAlias / {{ flask_app_path }}/app.wsgi

              <Directory {{ flask_app_path }}>
                  Require all granted
              </Directory>

              Alias /static {{ flask_app_path }}/static
              <Directory {{ flask_app_path }}/static/>
                  Require all granted
              </Directory>

              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>

    - name: Enable Flask app site
      shell: |
        a2ensite flaskapp.conf
        a2dissite 000-default.conf
        systemctl reload apache2
